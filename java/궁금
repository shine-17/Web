produces = "application/json;charset=UTF-8"
@RequestMapping
@ResponseBody
HttpSession session
HttpServletRequest request
HttpServletResponse response
AjaxResult
JsonArray
StringRedisTemplate
SQL실행계획 (쿼리공부좀 많이해야함...)
RedisTemplate
Redis DB

MyBatis에서 특수문자 쓸땐 CDATA

개인프로젝트 제작과정
https://okky.kr/article/958289

getInstance(), 동기화
https://hoon2kc.tistory.com/entry/getInstance-%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80

Handler, thread
웹소켓 (채팅 프로그램) 거의끝냄!!! 내일은 정말 끝! 내일은 정말정말끝..! 내일은 진짜끝..... 월요일 끝!
끝! 버그 조금씩 수정 ㅎㅎ

$(자바스크립트 객체) == jQuery 객체
변환이된다!!!


자바 Collections 동시성문제
ConcurrentModificationException 예외발생
https://m.blog.naver.com/tmondev/220393974518

프로그래밍 언어 공부 웹서비스
http://tcpschool.com/
  
세션,  웹소켓세션 , 폴링방식
https://88240.tistory.com/190
https://jeong-pro.tistory.com/80
https://medium.com/@icehongssii/%EA%B9%9C%EC%B0%8D%ED%95%9C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EB%93%A4%EC%9D%84-%EC%9C%84%ED%95%9C-%EA%B0%84%EB%8B%A8%ED%95%9C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%83%81%EC%8B%9D-2-2-http%EB%A5%BC-%EB%84%98%EC%96%B4%EC%84%9C-%EC%8B%A4%EC%8B%9C%EA%B0%84-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%82%B9websocket-c49125e1b5a0

자바스크립트 객체 속성 접근 . vs []  차이
https://medium.com/sjk5766/javascript-object-key-vs-object-key-%EC%B0%A8%EC%9D%B4-3c21eb49b763

기업들의 설문 (공부나 보완해야 할 점들)
https://42place.innovationacademy.kr/archives/6884

private 캡슐화, 은닉화 설명
https://skybaby.hooni.net/xe/index.php?mid=programming&document_srl=557

Agile
애자일 소프트웨어 개발

json 파싱
https://like-tomato.tistory.com/83

[웹개발] HTTP(S)
[웹개발] HTML
[웹개발] DOM
[웹개발] CSS
[웹개발] Selector
[웹개발] JavaScript
[웹개발] JSON
[웹개발] Object
[웹개발] Array
[웹개발] Devtools
[웹개발] Debug
[웹개발] 웹서버


estAPI 같은 이해도 필요하고
모듈화 관련된 이해도 필요하고
프로토콜이랑 데이터포맷의 이해
비동기 제어의 이해도 필요하빈다.
HTTP 헤더들에 대한 이해도 필요하고 상태코드에 대한 이해도 필요하저.   
너무 많겠다 싶겠지만 이게 웹의 시작이빈다.

// 환경설정 - Config 수집 설정 추가
    @RequestMapping(value="/addCollectSettingData",produces = "application/json;charset=UTF-8",method = RequestMethod.POST)
    @ResponseBody
    public Object addCollectSettingData(Locale locale, HttpSession session, HttpServletRequest request, HttpServletResponse response ) {
    	logger.info("ConfigurationDataController.java addCollectSettingData.", locale);
    	
    	AjaxResult result = new AjaxResult();
		String jsonData = null;
		JsonArray addArray = null;
        int iResult = 0;
    	
        try {
        	
            // Check login
            LoginInfo loginInfo = SessionHelper.getInstance().getLoginInfo(session, redisTemplate);
            if (loginInfo == null) {
                result.setSuccess(false);
                result.setErrorMessage("session_closed");
                return gson.toJson(result);
            }

            
//            String authority = indexDAOImpl.getMenuAuthority(loginInfo.user_id, "smssetting");
//            // Check authority (Read or Write)
//            if (authority == null) {
//                result.setSuccess(false);
//                result.setErrorMessage("unauthorized_access");
//                return gson.toJson(result);
//            }
            
            if (request.getParameter("addData") != null){
                String encode1 = EncryptHelper.getInstance().encryptAES128(request.getParameter("addData"));
                String jData1 = EncryptHelper.getInstance().decryptAES128(encode1);
                addArray = new Gson().fromJson(jData1, JsonArray.class);
			}
            
			for (JsonElement element : addArray) {
                JsonObject jsonObj = element.getAsJsonObject();
                ConfigCollectSetting configCollectSetting = new ConfigCollectSetting();
                String periodType = "";
                
                if (jsonObj.get("setup_name") != null)
                	configCollectSetting.setSetup_name(jsonObj.get("setup_name").toString().replaceAll("\"", ""));
                if (jsonObj.get("ip_start") != null)
                	configCollectSetting.setIp_start(jsonObj.get("ip_start").toString().replaceAll("\"", ""));
            	if (jsonObj.get("ip_end") != null)
            		configCollectSetting.setIp_end(jsonObj.get("ip_end").toString().replaceAll("\"", ""));
            	if (jsonObj.get("class_1") != null)
            		configCollectSetting.setClass_1(jsonObj.get("class_1").toString().replaceAll("\"", ""));
            	if (jsonObj.get("class_2") != null)
            		configCollectSetting.setClass_2(jsonObj.get("class_2").toString().replaceAll("\"", ""));
            	if (jsonObj.get("class_3") != null)
            		configCollectSetting.setClass_3(jsonObj.get("class_3").toString().replaceAll("\"", ""));
            	if (jsonObj.get("class_4") != null)
            		configCollectSetting.setClass_4(jsonObj.get("class_4").toString().replaceAll("\"", ""));
            	if (jsonObj.get("is_enable") != null)
            		configCollectSetting.setIs_enable(Integer.parseInt(jsonObj.get("is_enable").toString().replaceAll("\"", "")));
            	if (jsonObj.get("cmd_group_id") != null)
            		configCollectSetting.setCmd_group_id(Integer.parseInt(jsonObj.get("cmd_group_id").toString().replaceAll("\"", "")));
            	if (jsonObj.get("period_type") != null)
            		periodType = jsonObj.get("period_type").toString().replaceAll("\"", "");
            		configCollectSetting.setPeriod_type(jsonObj.get("period_type").toString().replaceAll("\"", ""));
            		
            	if(periodType.equals("DAILY")) {
                	configCollectSetting.setCol_day(null);
                	configCollectSetting.setCol_dayofweek(null);
            	}
            	else if(periodType.equals("WEEKLY")) {
            		configCollectSetting.setCol_day(null);
            		
            		if (jsonObj.get("col_dayofweek") != null)
                		configCollectSetting.setCol_dayofweek(jsonObj.get("col_dayofweek").toString().replaceAll("\"", ""));
            	}
            	else if(periodType.equals("MONTHLY")) {
            		configCollectSetting.setCol_dayofweek(null);
            		
            		if (jsonObj.get("col_monthlyDate") != null)
                		configCollectSetting.setCol_day(Integer.parseInt(jsonObj.get("col_monthlyDate").toString().replaceAll("\"", "")));
            	}
            	
            	if (jsonObj.get("col_hour") != null)
            		configCollectSetting.setCol_hour(jsonObj.get("col_hour").toString().replaceAll("\"", ""));
                
                iResult = configurationDAOImpl.insertConfigCollectSetting(configCollectSetting);
			}
			
            
            if(iResult < 1){
                result.setSuccess(false);
             }else if(iResult > 0){
                result.setSuccess(true);

    			// 사용자 접속 정보 저장
//    			UserAccessInfo uai = new UserAccessInfo();
//    			uai.setUserIP(commonHelper.getClientIpAddr(request));
//    			uai.setSubNameCd("");
//    			uai.setAction("S");
//    			uai.setFunctionName("");
//    			baseDAOImpl.insertUserAccessInfo(request, session, uai);
             }
            
            result.setData(iResult);
            
        } catch (Exception e) {
            logger.error(e.getMessage(), e);
            result.setSuccess(false);
            result.setErrorMessage(e.getMessage());
        }
        return gson.toJson(result);
    }
